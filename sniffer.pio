.program sniffer

    pull block                  ; Pull from FIFO to OSR (only once)
    mov y, osr                  ; Copy value from OSR to y scratch register

    set x, 4                    ; ADC_CS_START_ONCE_BITS
    mov osr, x

.wrap_target
    mov x, y                    ; Initialize counter variable

    wait 0 gpio 8 [11]
    wait 1 gpio 8               ; wait image ready high

pixelout:
        wait 1 gpio 9 [11]      ; wait clock low and then delay 96ns

        set pins, 0             ; set adc ready low

        mov isr, osr
        push block              ; signal

        set pins, 1             ; set adc ready high

        wait 0 gpio 9 [11]      ; wait clock high
    jmp x-- pixelout            ; loop through all the pixels

    irq 0                       ; raise IRQ0
.wrap

% c-sdk {

#define DATA_PINS 0
#define N_DATA_PINS 8
#define IMG_READY_PIN 8
#define CLK_PIN 9
#define ADC_READY_PIN 10

#define DATA_MASK 0b11111111u
#define PIN_DIRS (1u << ADC_READY_PIN)
#define PIN_MASK ((DATA_MASK << DATA_PINS) | (1u << IMG_READY_PIN) | (1u << CLK_PIN) | (1u <<  ADC_READY_PIN))

static inline void sniffer_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = sniffer_program_get_default_config(offset);

    sm_config_set_in_pins(&c, DATA_PINS);
    sm_config_set_in_shift(&c, true, false, N_DATA_PINS);
    sm_config_set_set_pins(&c, ADC_READY_PIN, 1);

//    sm_config_set_clkdiv(&c, 5);

    for (uint8_t i = DATA_PINS; i != (DATA_PINS + N_DATA_PINS); i++) pio_gpio_init(pio, i);
    pio_gpio_init(pio, IMG_READY_PIN);
    pio_gpio_init(pio, CLK_PIN);
    pio_gpio_init(pio, ADC_READY_PIN);

    pio_sm_set_pindirs_with_mask(pio, sm, PIN_DIRS, PIN_MASK);

    pio_sm_init(pio, sm, offset, &c);

    // pio_sm_set_enabled(pio, sm, true);
}

%}